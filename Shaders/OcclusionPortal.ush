// Function to calculate the normal of a plane defined by three points
float3 CalculateNormal(const float3 A, const float3 B, const float3 C)
{
    const float3 AB = B - A;
    const float3 AC = C - A;
    return normalize(cross(AB, AC));
}

// Function to check if the ray intersects with the plane
bool CheckRayPlaneIntersection(const float3 RayOrigin, const float3 RayDirection, const float3 Normal, const float3 PointOnPlane)
{
    const float PlaneD = -dot(Normal, PointOnPlane);
    const float Denom = dot(Normal, RayDirection);
    
    // Check if the ray is parallel to the plane
    if (abs(Denom) < 1e-6)
    {
        return false; // No intersection
    }

    const float t = -(PlaneD + dot(Normal, RayOrigin)) / Denom;
    return t >= 0.0; // Intersection occurs if t is positive
}

// Function to check if a point is inside a square defined by its vertices
bool IsPointInsideSquare(const float3 P, float3 Vertices[4], const float3 Normal)
{
    for (int i = 0; i < 4; i++)
    {
        const float3 Edge = Vertices[(i + 1) % 4] - Vertices[i];
        const float3 ToP = P - Vertices[i];
        if (dot(Normal, cross(Edge, ToP)) < 0)
        {
            return false; // Point is outside the square
        }
    }
    return true;
}

// Main function to calculate ray-square intersection
bool CalculateRaySquareIntersection(const float3 PixelWS, const float3 CameraWS, const float3 A, const float3 B, const float3 C, const float3 D)
{
    const float3 RayDirection = normalize(CameraWS - PixelWS);
    const float3 Normal = CalculateNormal(A, B, C);
    
    // Determine the side of the plane on which the camera is located
    const bool bIsCameraInFront = dot(Normal, CameraWS - A) < 0.0;
    
    // Adjust the check based on the camera's side
    if (bIsCameraInFront)
    {
        // Camera in front, normal direction towards camera
        if (dot(Normal, RayDirection) >= 0.0)
        {
            return false; // Ray is pointing away from or parallel to the plane
        }
    }
    else
    {
        // Camera behind, normal direction away from camera
        if (dot(Normal, RayDirection) <= 0.0)
        {
            return false; // Ray is pointing away from or parallel to the plane
        }
    }

    // Check for ray-plane intersection
    if (!CheckRayPlaneIntersection(PixelWS, RayDirection, Normal, A))
    {
        return false; // No intersection with the plane
    }
    
    // Calculate the intersection point
    const float PlaneD = -dot(Normal, A);
    const float t = -(PlaneD + dot(Normal, PixelWS)) / dot(Normal, RayDirection);
    const float3 P = PixelWS + t * RayDirection;
    
    // Check if the intersection point is inside the square
    float3 Vertices[4] = {A, B, C, D};
    if (IsPointInsideSquare(P, Vertices, Normal))
    {
        return true; // Inside the square
    }
    return false; // Outside the square
}
